// Generated by CoffeeScript 1.10.0
var BANNER, SWITCHES, exec, fs, helpers, kckr, optionParser, optparse, opts, parseOptions, path, print_line, print_warn, ref, run, sources, spawn, timeLog, usage, version;

fs = require('fs');

path = require('path');

helpers = require('./helpers');

optparse = require('./optparse');

kckr = require('./kckr');

ref = require('child_process'), spawn = ref.spawn, exec = ref.exec;

print_line = function(line) {
  return process.stdout.write(line + '\n');
};

print_warn = function(line) {
  return process.stderr.write(line + '\n');
};

BANNER = 'Usage: kckr [options] path/to/watch\n';

SWITCHES = [['-e', '--execute [CMD]', 'cmd to execute upon file change. use {}, {source}, {basename}, {basename_noext}, {dirname} for path placeholder(s).'], ['-k', '--kickonce', 'just traverse the dir, exec on each match, and quit. don\'t do any watching.'], ['-r', '--pattern [PATTERN]', 'pattern for filenames to match if watching a dir.'], ['-h', '--help', 'display this help message'], ['-v', '--version', 'display the version number']];

opts = {};

sources = [];

optionParser = null;

run = function() {
  var action, err, error, exit, k, kckrCallback, literals, re;
  exit = function() {
    print_line("\nkckr sleep. (-.- ) Zz");
    return process.exit(0);
  };
  try {
    process.on("SIGINT", exit);
  } catch (error) {
    err = error;
    process.on("exit", exit);
  }
  parseOptions();
  if (opts.help) {
    return usage();
  }
  if (opts.version) {
    return version();
  }
  if (!opts.execute) {
    return;
  }
  literals = opts.run ? sources.splice(1) : [];
  kckrCallback = function(source, base) {
    var basename, basename_noext, cmd, dirname, nobase, nobase_noext;
    basename = path.basename(source);
    basename_noext = basename.replace(path.extname(basename), '');
    dirname = path.dirname(source);
    nobase = source.replace(base, '').replace(/^\/+/, '');
    nobase_noext = nobase.replace(path.extname(basename), '');
    cmd = opts.execute.replace("{source}", source);
    cmd = cmd.replace("{basename}", basename);
    cmd = cmd.replace("{basename_noext}", basename_noext);
    cmd = cmd.replace("{dirname}", dirname);
    cmd = cmd.replace("{nobase}", nobase);
    cmd = cmd.replace("{nobase_noext}", nobase_noext);
    cmd = cmd.replace("{}", source);
    timeLog("<- `" + cmd + "`");
    return exec(cmd, function(err, stdo, stde) {
      var i, j, l, len, len1, line, ref1, ref2, results;
      if (err) {
        timeLog("!!! Error");
      }
      ref1 = (function() {
        var j, len, ref1, results;
        ref1 = stdo.split("\n");
        results = [];
        for (j = 0, len = ref1.length; j < len; j++) {
          l = ref1[j];
          if (l !== '') {
            results.push(l);
          }
        }
        return results;
      })();
      for (i = 0, len = ref1.length; i < len; i++) {
        line = ref1[i];
        timeLog("-> " + line);
      }
      ref2 = (function() {
        var len1, m, ref2, results1;
        ref2 = stde.split("\n");
        results1 = [];
        for (m = 0, len1 = ref2.length; m < len1; m++) {
          l = ref2[m];
          if (l !== '') {
            results1.push(l);
          }
        }
        return results1;
      })();
      results = [];
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        line = ref2[j];
        results.push(timeLog("-> " + line));
      }
      return results;
    });
  };
  re = opts.pattern ? new RegExp(opts.pattern) : /.*/;
  k = new kckr.Kckr({
    pattern: re,
    sources: sources,
    callback: kckrCallback,
    kickonce: opts.kickonce
  });
  action = opts.kickonce ? "kicking ( O_O)" : "watching (O_O )";
  return timeLog("kckr is " + action);
};

parseOptions = function() {
  var o;
  optionParser = new optparse.OptionParser(SWITCHES, BANNER);
  o = opts = optionParser.parse(process.argv.slice(2));
  sources = o["arguments"];
};

usage = function() {
  return print_line((new optparse.OptionParser(SWITCHES, BANNER)).help());
};

version = function() {
  return exec('npm view kckr version | cut -d . -f 1,2,3 -s', function(err, stdo, stde) {
    if (err != null) {
      print_line("Unknown version.");
    }
    if (err != null) {
      return;
    }
    return print_line("Kckr version " + stdo);
  });
};

timeLog = function(message) {
  return print_line(((new Date).toLocaleTimeString()) + " - " + message);
};

exports.run = run;
